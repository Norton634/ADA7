#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int **crearMatriz(int n) {
    int **M = (int**)calloc(n, sizeof(int*));
    for (int i = 0; i < n; i++)
        M[i] = (int*)calloc(n, sizeof(int));
    return M;
}

void generarMatriz(int **M, int n) {
    for(int i = 0; i < n; i++)
        for(int j = 0; j < n; j++)
            M[i][j] = rand() % 100;
}

void copiarBloque(int **origen, int **destino, int fila, int col, int n) {
    for(int i = 0; i < n; i++)
        for(int j = 0; j < n; j++)
            destino[i][j] = origen[i+fila][j+col];
}

void pegarBloque(int **origen, int **destino, int fila, int col, int n) {
    for(int i = 0; i < n; i++)
        for(int j = 0; j < n; j++)
            destino[i+fila][j+col] = origen[i][j];
}

void sumar(int **A, int **B, int **C, int n) {
    for(int i=0; i<n; i++)
        for(int j=0; j<n; j++)
            C[i][j] = A[i][j] + B[i][j];
}

void restar(int **A, int **B, int **C, int n) {
    for(int i=0; i<n; i++)
        for(int j=0; j<n; j++)
            C[i][j] = A[i][j] - B[i][j];
}

// ============ MÉTODO TRADICIONAL ============
void multiplicacionTradicional(int **A, int **B, int **C, int n) {
    for(int i = 0; i < n; i++)
        for(int j = 0; j < n; j++)
            for(int k = 0; k < n; k++)
                C[i][j] += A[i][k] * B[k][j];
}

// ============ MÉTODO DIVIDE AND CONQUER ============
void multiplicacionDAC(int **A, int **B, int **C, int n) {
    if(n == 1) {
        C[0][0] = A[0][0] * B[0][0];
        return;
    }

    int mitad = n/2;
    int **A11 = crearMatriz(mitad);
    int **A12 = crearMatriz(mitad);
    int **A21 = crearMatriz(mitad);
    int **A22 = crearMatriz(mitad);
    int **B11 = crearMatriz(mitad);
    int **B12 = crearMatriz(mitad);
    int **B21 = crearMatriz(mitad);
    int **B22 = crearMatriz(mitad);
    int **C11 = crearMatriz(mitad);
    int **C12 = crearMatriz(mitad);
    int **C21 = crearMatriz(mitad);
    int **C22 = crearMatriz(mitad);
    int **M1 = crearMatriz(mitad);
    int **M2 = crearMatriz(mitad);

    copiarBloque(A, A11, 0, 0, mitad);
    copiarBloque(A, A12, 0, mitad, mitad);
    copiarBloque(A, A21, mitad, 0, mitad);
    copiarBloque(A, A22, mitad, mitad, mitad);
    copiarBloque(B, B11, 0, 0, mitad);
    copiarBloque(B, B12, 0, mitad, mitad);
    copiarBloque(B, B21, mitad, 0, mitad);
    copiarBloque(B, B22, mitad, mitad, mitad);

    multiplicacionDAC(A11, B11, M1, mitad);
    multiplicacionDAC(A12, B21, M2, mitad);
    sumar(M1, M2, C11, mitad);

    multiplicacionDAC(A11, B12, M1, mitad);
    multiplicacionDAC(A12, B22, M2, mitad);
    sumar(M1, M2, C12, mitad);

    multiplicacionDAC(A21, B11, M1, mitad);
    multiplicacionDAC(A22, B21, M2, mitad);
    sumar(M1, M2, C21, mitad);

    multiplicacionDAC(A21, B12, M1, mitad);
    multiplicacionDAC(A22, B22, M2, mitad);
    sumar(M1, M2, C22, mitad);

    pegarBloque(C11, C, 0, 0, mitad);
    pegarBloque(C12, C, 0, mitad, mitad);
    pegarBloque(C21, C, mitad, 0, mitad);
    pegarBloque(C22, C, mitad, mitad, mitad);
}

// ============ MÉTODO STRASSEN ============
void multiplicacionStrassen(int **A, int **B, int **C, int n) {
    if(n == 1) {
        C[0][0] = A[0][0] * B[0][0];
        return;
    }

    int mitad = n/2;
    int **A11 = crearMatriz(mitad), **A12 = crearMatriz(mitad), **A21 = crearMatriz(mitad), **A22 = crearMatriz(mitad);
    int **B11 = crearMatriz(mitad), **B12 = crearMatriz(mitad), **B21 = crearMatriz(mitad), **B22 = crearMatriz(mitad);
    int **M1 = crearMatriz(mitad), **M2 = crearMatriz(mitad), **M3 = crearMatriz(mitad), **M4 = crearMatriz(mitad);
    int **M5 = crearMatriz(mitad), **M6 = crearMatriz(mitad), **M7 = crearMatriz(mitad);
    int **T1 = crearMatriz(mitad), **T2 = crearMatriz(mitad);
    int **C11 = crearMatriz(mitad), **C12 = crearMatriz(mitad), **C21 = crearMatriz(mitad), **C22 = crearMatriz(mitad);

    copiarBloque(A, A11, 0, 0, mitad);
    copiarBloque(A, A12, 0, mitad, mitad);
    copiarBloque(A, A21, mitad, 0, mitad);
    copiarBloque(A, A22, mitad, mitad, mitad);
    copiarBloque(B, B11, 0, 0, mitad);
    copiarBloque(B, B12, 0, mitad, mitad);
    copiarBloque(B, B21, mitad, 0, mitad);
    copiarBloque(B, B22, mitad, mitad, mitad);

    sumar(A11, A22, T1, mitad);
    sumar(B11, B22, T2, mitad);
    multiplicacionStrassen(T1, T2, M1, mitad);  // M1 = (A11 + A22)(B11 + B22)

    sumar(A21, A22, T1, mitad);
    multiplicacionStrassen(T1, B11, M2, mitad);  // M2 = (A21 + A22)B11

    restar(B12, B22, T1, mitad);
    multiplicacionStrassen(A11, T1, M3, mitad);  // M3 = A11(B12 - B22)

    restar(B21, B11, T1, mitad);
    multiplicacionStrassen(A22, T1, M4, mitad);  // M4 = A22(B21 - B11)

    sumar(A11, A12, T1, mitad);
    multiplicacionStrassen(T1, B22, M5, mitad);  // M5 = (A11 + A12)B22

    restar(A21, A11, T1, mitad);
    sumar(B11, B12, T2, mitad);
    multiplicacionStrassen(T1, T2, M6, mitad);   // M6 = (A21 - A11)(B11 + B12)

    restar(A12, A22, T1, mitad);
    sumar(B21, B22, T2, mitad);
    multiplicacionStrassen(T1, T2, M7, mitad);   // M7 = (A12 - A22)(B21 + B22)

    // C11 = M1 + M4 - M5 + M7
    sumar(M1, M4, T1, mitad);
    restar(T1, M5, T2, mitad);
    sumar(T2, M7, C11, mitad);

    // C12 = M3 + M5
    sumar(M3, M5, C12, mitad);

    // C21 = M2 + M4
    sumar(M2, M4, C21, mitad);

    // C22 = M1 - M2 + M3 + M6
    restar(M1, M2, T1, mitad);
    sumar(T1, M3, T2, mitad);
    sumar(T2, M6, C22, mitad);

    pegarBloque(C11, C, 0, 0, mitad);
    pegarBloque(C12, C, 0, mitad, mitad);
    pegarBloque(C21, C, mitad, 0, mitad);
    pegarBloque(C22, C, mitad, mitad, mitad);
}

int main() {
    int **A, **B, **C;
    int n;
    double time1, timedif;

    printf("Ingrese el tamaño de la matriz (potencia de 2): ");
    scanf("%d", &n);

    A = crearMatriz(n);
    B = crearMatriz(n);
    C = crearMatriz(n);

    generarMatriz(A, n);
    generarMatriz(B, n);

    // =============== TRADICIONAL ===============
    time1 = (double)clock() / CLOCKS_PER_SEC;
    multiplicacionTradicional(A, B, C, n);
    timedif = ((double)clock() / CLOCKS_PER_SEC) - time1;
    printf("Algoritmo Tradicional\nInicio: %f s\nDuración: %f s\n\n", time1, timedif);

    // =============== DAC ===============
    C = crearMatriz(n);
    time1 = (double)clock() / CLOCKS_PER_SEC;
    multiplicacionDAC(A, B, C, n);
    timedif = ((double)clock() / CLOCKS_PER_SEC) - time1;
    printf("Algoritmo DAC\nInicio: %f s\nDuración: %f s\n\n", time1, timedif);

    // =============== STRASSEN ===============
    C = crearMatriz(n);
    time1 = (double)clock() / CLOCKS_PER_SEC;
    multiplicacionStrassen(A, B, C, n);
    timedif = ((double)clock() / CLOCKS_PER_SEC) - time1;
    printf("Algoritmo Strassen\nInicio: %f s\nDuración: %f s\n\n", time1, timedif);

    return 0;
}
