#include <stdio.h>
#include <stdbool.h>
#define MAX 1000  // tamaño máximo para el arreglo de Fibonacci
/*
  Pichardo Marroquin Juan Carlos
  Colin Perez Ana Karen
  Yescas Carrillo Alejandro Gabriel
*/
// Función para verificar si un número es primo
bool esPrimo(int n) {
    if (n <= 1) return false;
    for (int i = 2; i*i <= n; ++i)
        if (n % i == 0) return false;
    return true;
}

// Función para generar la secuencia de Fibonacci filtrada
int generarFibonacciFiltrado(int fib[], int K) {
    int a = 0, b = 1, c;
    int pos = 2;  // posición comienza en 2
    int index = 2; // índice en el arreglo
    fib[0] = 0;
    fib[1] = 1;
    while (1) {
        c = a + b;
        if (c > K) break;
        fib[index] = c;
        a = b;
        b = c;
        index++;
        pos++;
    }
    // filtra omitiendo posiciones primas
    int filtrado[MAX];
    int filtradoIndex = 0;
    for (int i = 0; i < index; i++) {
        if (!esPrimo(i + 1)) { // posiciones empiezan en 1
            filtrado[filtradoIndex++] = fib[i];
        }
    }
    // Copia el arreglo filtrado de regreso
    for (int i = 0; i < filtradoIndex; i++) {
        fib[i] = filtrado[i];
    }
    return filtradoIndex; // regresamos el tamaño del arreglo filtrado
}

// Función principal
int main() {
    int dia, mes, anio;
    printf("Introduce tu dia de nacimiento: ");
    scanf("%d", &dia);
    printf("Introduce tu mes de nacimiento: ");
    scanf("%d", &mes);
    printf("Introduce tu año de nacimiento: ");
    scanf("%d", &anio);
    int K = dia * 100 + mes * 10 + (anio % 100);
    printf("K calculado: %d\n", K);
    int fib[MAX];
    int size = generarFibonacciFiltrado(fib, K);

    printf("Secuencia de Fibonacci filtrada: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", fib[i]);
    }
    printf("\n");
    // Encuentra los términos mínimos
    int solucion[MAX];
    int solucionIndex = 0;
    int i = size - 1;
    int suma = 0;
    int K_original = K; 
    while (K > 0 && i >= 0) {
        if (fib[i] <= K) {
            solucion[solucionIndex++] = fib[i];
            K -= fib[i];
        }
        i--;
    }
    printf("Solución óptima: ");
    suma = 0;
    for (int j = 0; j < solucionIndex; j++) {
        printf("%d", solucion[j]);
        suma += solucion[j];
  if (suma != K_original) printf(" + ");
    }
    printf(" = %d\n", K_original);
    printf("Número mínimo de términos: %d\n", solucionIndex);
    return 0;
}
